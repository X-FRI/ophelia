grammar;

match {
  r"\s*" => {},
  r"\#[^\n\r]*[\n\r]*" => {},
  _
}

pub Program: String = <func_def: DefineFun> => func_def;

DefineFun: String = {
  "let" <id: Ident> "(" ")" "=>" <func_type: FunType> <block: Block> => {
    format!("[Function]: {}(...) => {} {}", id, func_type, block)
  }
}

FunType: String = "Int" => "Int".to_string();

Block: String = "{" <stmt: Stmt> "}" => format!("{{ {} }}", stmt);

Stmt: String = "return" <num: Number> ";" => format!("return {};", num);

Number: String = <num: IntConst> => num.to_string();

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}