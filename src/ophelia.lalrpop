use crate::ast::*;

grammar;

match {
  r"\s*" => {},
  r"#[^\n\r]*[\n\r]*" => {},
  _
}

pub CompUnit: CompUnit = {
  <start:@L>
    <items: (GlobalItem)*>
  <end:@R> => {
    CompUnit {
      items,
      pos: Position(start, end)
    }
  }
}

GlobalItem: GlobalItem = {
  Decl => GlobalItem::Decl(<>),
  FuncDef => GlobalItem::FuncDef(<>),
}

Decl: Decl = {
  ConstDecl => Decl::Const(<>),
  VarDecl => Decl::Var(<>),
}

ConstDecl: ConstDecl = {
  "val"
  <start:@L>
    <def: ConstDef>
    <mut defs: ("," <ConstDef>)*>
    ";"
  <end:@R> => {
    defs.insert(0, def);
    ConstDecl {
      defs,
      pos: Position(start, end)
    }
  }
}

ConstDef: ConstDef = {
  <start:@L>
    <id: Ident>
    <dims: ("[" <ConstExpr> "]")*>
    "="
    <init: ConstInitVal>
  <end:@R> => {
    ConstDef { 
      id,
      dims,
      init,
      pos: Position(start, end)
    }
  }
}

ConstInitVal: ConstInitVal = {
  ConstExpr => ConstInitVal::Expr(<>),
  "{" "}" => ConstInitVal::List(Vec::new()),
  "{" <init: ConstInitVal> <mut inits: ("," <ConstInitVal>)*> "}" => {
    inits.insert(0, init);
    ConstInitVal::List(inits)
  }
}

VarDecl: VarDecl = {
  <start:@L>
    "let"
    <def: VarDef>
    <mut defs: ("," <VarDef>)*>
    ";"
  <end:@R> => {
    defs.insert(0, def);
    VarDecl {
      defs,
      pos: Position(start, end)
    }
  }
}

VarDef: VarDef = {
  <start:@L>
    <id: Ident>
    <dims: ("[" <ConstExpr> "]")*>
    <init: ("=" <InitVal>)?> 
  <end:@R> => {
    VarDef {
      id,
      dims,
      init,
      pos: Position(start, end) 
    }
  }
}

InitVal: InitVal = {
  Expr => InitVal::Expr(<>),
  "{" "}" => InitVal::List(Vec::new()),
  "{" <init: InitVal> <mut inits: ("," <InitVal>)*> "}" => {
    inits.insert(0, init);
    InitVal::List(inits)
  }
}

FuncDef: FuncDef = {
  <start:@L>
    "let"
    <id: Ident>
    "("
    ")"
    "=>"
    <ty: Type>
    <block: Block>
  <end:@R> => {
    FuncDef {
      ty,
      id,
      params: Vec::new(),
      block,
      pos: Position(start, end)
    }
  },

  <start:@L>
    "let"
    <id: Ident>
    "("
    <param: FuncFParam>
    <mut params: ("," <FuncFParam>)*>
    ")"
    "=>"
    <ty: Type>
    <block: Block>
  <end:@R> => {
    params.insert(0, param);
    FuncDef {
      ty,
      id,
      params,
      block,
      pos: Position(start, end)
    }
  }
}

Type: Type = {
  <start:@L> "Int" <end:@R> => Type::Int(Position(start, end)),
  <start:@L> "Unit" <end:@R> => Type::Unit(Position(start, end))
}

FuncFParam: FuncFParam = {
  <start:@L>
    <typ: Type>
    <id: Ident>
    <dims: ("[" "]" <("[" <ConstExpr> "]")*>)?>
  <end:@R> => {
    FuncFParam {
      typ,
      id,
      dims,
      pos :Position(start, end)
    }
  }
}

Block: Block = {
  <start:@L>
    "{"
    <items: (BlockItem)*>
    "}"
  <end:@R> =>  {
    Block {
      items,
      pos :Position(start, end)
    }
  }
}

BlockItem: BlockItem = {
  Decl => BlockItem::Decl(<>),
  Stmt => BlockItem::Stmt(<>),
}

Stmt: Stmt = {
  MatchedStmt => <>,
  OpenStmt => <>,
}

MatchedStmt: Stmt = {
  <start:@L>
    <lval: LVal>
    "="
    <exp: Expr>
    ";"
  <end:@R> => {
    Stmt::Assign(Assign {
      lval,
      exp,
      pos :Position(start, end)
    })
  },

  <start:@L>
    <exp: (Expr)?>
    ";"
  <end:@R> => {
    Stmt::ExprStmt(ExprStmt {
      exp,
      pos :Position(start, end)
    })
  },

  Block => Stmt::Block(<>),
  
  <start:@L>
    "if"
    "("
    <cond: Expr>
    ")"
    <then: MatchedStmt>
    "else"
    <else_then: MatchedStmt>
  <end:@R> => {
    Stmt::If(Box::new(If {
      cond,
      then,
      else_then: Some(else_then),
      pos :Position(start, end)
    }))
  },

  <start:@L>
    "while"
    "("
    <cond: Expr>
    ")"
    <body: MatchedStmt>
  <end:@R> => {
    Stmt::While(Box::new(While {
      cond,
      body,
      pos :Position(start, end)
    }))
  },

  <start:@L>
    "break"
    ";"
  <end:@R> => {
    Stmt::Break(Break{
      pos: Position(start, end)
    })
  },

  <start:@L>
    "continue"
    ";"
  <end:@R> => {
    Stmt::Continue(Continue{
      pos: Position(start, end)
    })
  },

  <start:@L>
    "return"
    <exp: (Expr)?>
    ";"
  <end:@R> => {
    Stmt::Return(Return {
      exp,
      pos: Position(start, end) })
  }
}

OpenStmt: Stmt = {
  <start:@L>
    "if"
    "("
    <cond: Expr>
    ")"
    <then: Stmt>
  <end:@R> => {
    Stmt::If(Box::new(If {
      cond,
      then,
      else_then: None,
      pos: Position(start, end)
    }))
  },

  <start:@L>
    "if"
    "("
    <cond: Expr>
    ")"
    <then: MatchedStmt>
    "else"
    <else_then: OpenStmt>
  <end:@R> => {
    Stmt::If(Box::new(If {
      cond,
      then,
      else_then: Some(else_then),
      pos :Position(start, end)
    }))
  },

  <start:@L>
    "while"
    "("
    <cond: Expr>
    ")"
    <body: OpenStmt>
  <end:@R> => {
    Stmt::While(Box::new(While {
      cond,
      body,
      pos: Position(start, end)
    }))
  },
}

Expr: Expr = {
  <start:@L>
    <lor: LOrExpr>
  <end:@R> => {
    Expr {
      lor,
      pos: Position(start, end)
    }
  }
}

LVal: LVal = {
  <start:@L>
    <id: Ident>
    <indices: ("[" <Expr> "]")*>
  <end:@R> => {
    LVal {
      id,
      indices,
      pos: Position(start, end)
    }
  }
}

PrimaryExpr: PrimaryExpr = {
  "(" <Expr> ")" => PrimaryExpr::Expr(Box::new(<>)),
  LVal => PrimaryExpr::LVal(<>),
  Number => PrimaryExpr::Number(<>),
}

UnaryExpr: UnaryExpr = {
  PrimaryExpr => UnaryExpr::Primary(<>),
  
  <start:@L>
    <id: Ident>
    "("
    ")"
  <end:@R> => {
    UnaryExpr::Call(FuncCall {
      id,
      args: Vec::new(),
      pos: Position(start, end)
    })
  },

  <start:@L>
    <id: Ident>
    "("
    <arg: Expr>
    <mut args: ("," <Expr>)*>
    ")"
  <end:@R> => {
    args.insert(0, arg);
    UnaryExpr::Call(FuncCall {
      id,
      args,
      pos: Position(start, end)
    })
  },

  "+" <UnaryExpr> => <>,
  <op: UnaryOp> <exp: UnaryExpr> => UnaryExpr::Unary(op, Box::new(exp)),
}

MulExpr: MulExpr = {
  UnaryExpr => MulExpr::Unary(<>),
  <lhs: MulExpr> <op: MulOp> <rhs: UnaryExpr> => {
    MulExpr::MulUnary(Box::new(lhs), op, rhs)
  }
}

AddExpr: AddExpr = {
  MulExpr => AddExpr::Mul(<>),
  <lhs: AddExpr> <op: AddOp> <rhs: MulExpr> => {
    AddExpr::AddMul(Box::new(lhs), op, rhs)
  }
}

RelExpr: RelExpr = {
  AddExpr => RelExpr::Add(<>),
  <lhs: RelExpr> <op: RelOp> <rhs: AddExpr> => {
    RelExpr::RelAdd(Box::new(lhs), op, rhs)
  }
}

EqExpr: EqExpr = {
  RelExpr => EqExpr::Rel(<>),
  <lhs: EqExpr> <op: EqOp> <rhs: RelExpr> => {
    EqExpr::EqRel(Box::new(lhs), op, rhs)
  }
}

LAndExpr: LAndExpr = {
  EqExpr => LAndExpr::Eq(<>),
  <lhs: LAndExpr> "&&" <rhs: EqExpr> => {
    LAndExpr::LAndEq(Box::new(lhs), rhs)
  }
}

LOrExpr: LOrExpr = {
  LAndExpr => LOrExpr::LAnd(<>),
  <lhs: LOrExpr> "||" <rhs: LAndExpr> => {
    LOrExpr::LOrLAnd(Box::new(lhs), rhs)
  }
}

ConstExpr: ConstExpr = {
  <start:@L>
    <exp: Expr>
  <end:@R> => {
    ConstExpr {
      exp,
      pos: Position(start, end)
    }
  }
}

Ident: Ident = {
  <start:@L>
    <id: r"[_a-zA-Z][_a-zA-Z0-9]*">
  <end:@R> => {
    Ident {
      id: id.to_string(),
      pos: Position(start, end)
    }
  }
}

Number: Number = {
  <start:@L> 
    <literal: r"[1-9][0-9]*">
  <end:@R> => {
    Number {
      value: i32::from_str_radix(literal, 10).unwrap(),
      pos: Position(start, end)
    }
  },

  <start:@L> 
    <literal: r"0[0-7]*">
  <end:@R> => {
    Number {
      value: i32::from_str_radix(literal, 8).unwrap(),
      pos: Position(start, end)
    }
  },

  <start:@L> 
    <literal: r"0[xX][0-9a-fA-F]+">
  <end:@R> => {
    Number {
      value: i32::from_str_radix(&literal[2..], 16).unwrap(),
      pos: Position(start, end)
    }
  }
}

UnaryOp: UnaryOp = {
  <start:@L>
    "-"
  <end:@R> => {
    UnaryOp::Neg(Position(start, end))
  },

  <start:@L>
    "!"
  <end:@R> => {
    UnaryOp::LNot(Position(start, end))
  }
}

MulOp: MulOp = {
  <start:@L>
    "*"
  <end:@R> => {
    MulOp::Mul(Position(start, end))
  },

  <start:@L>
    "/"
  <end:@R> => {
    MulOp::Div(Position(start, end))
  },

  <start:@L>
    "%"
  <end:@R> => {
    MulOp::Mod(Position(start, end))
  }
}

AddOp: AddOp = {
  <start:@L>
    "+"
  <end:@R> => {
    AddOp::Add(Position(start, end))
  },

  <start:@L>
    "-"
  <end:@R> => {
    AddOp::Sub(Position(start, end))
  }
}

RelOp: RelOp = {
  <start:@L>
    "<"
  <end:@R> => {
    RelOp::Lt(Position(start, end))
  },

  <start:@L>
    ">"
  <end:@R> => {
    RelOp::Gt(Position(start, end))
  },

  <start:@L>
    "<="
  <end:@R> => {
     RelOp::Le(Position(start, end))
  },

  <start:@L>
    ">="
  <end:@R> => {
     RelOp::Ge(Position(start, end))
  }
}

EqOp: EqOp = {
  <start:@L>
    "=="
  <end:@R> => {
     EqOp::Eq(Position(start, end))
  },

  <start:@L>
    "!="
  <end:@R> => {
     EqOp::Ne(Position(start, end))
  }
}
